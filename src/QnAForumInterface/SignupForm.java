/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package QnAForumInterface;

import DataObjects.UserDataObject;
import QnAForumDatabase.Database;
import QnAForumDatabase.EncryptionUtils;

import Resources.ResourceManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author AJ
 */
public class SignupForm extends JPanel {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField emailField;
    private JLabel emailLabel;
    private JToggleButton loginBtn;
    private JLabel loginInfoLabel;
    private JPasswordField pwdCheckField;
    private JLabel pwdCheckLabel;
    private JPasswordField pwdField;
    private JLabel pwdLabel;
    private JButton signupBtn;
    private JLabel signupErrorLabel;
    private JLabel titleLabel;
    private JTextField usernameField;
    private JLabel usernameLabel;
    /**
     * Creates new form LoginForm
     */
    public SignupForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        titleLabel = new JLabel();
        usernameLabel = new JLabel();
        usernameField = new JTextField();
        emailLabel = new JLabel();
        emailField = new JTextField();
        pwdLabel = new JLabel();
        pwdField = new JPasswordField();
        pwdCheckLabel = new JLabel();
        pwdCheckField = new JPasswordField();
        signupErrorLabel = new JLabel();
        signupBtn = new JButton();
        loginInfoLabel = new JLabel();
        loginBtn = new JToggleButton();

        setBackground(ResourceManager.getColor("base"));
        setLayout(new GridBagLayout());

        titleLabel.setForeground(ResourceManager.getColor("main"));
        titleLabel.setText("Register");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 1.0;
        add(titleLabel, gridBagConstraints);
        titleLabel.setFont(ResourceManager.getFont("inter_semibold.48"));

        usernameLabel.setText("Username:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(0, 5, 5, 5);
        add(usernameLabel, gridBagConstraints);
        usernameLabel.setFont(ResourceManager.getFont("inter_regular.26"));

        usernameField.setMinimumSize(new Dimension(200, 39));
        usernameField.setPreferredSize(new Dimension(200, 29));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(0, 5, 5, 5);
        add(usernameField, gridBagConstraints);
        usernameField.setFont(ResourceManager.getFont("inter_regular.24"));

        emailLabel.setText("Email-ID:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(emailLabel, gridBagConstraints);
        emailLabel.setFont(ResourceManager.getFont("inter_regular.26"));

        emailField.setMinimumSize(new Dimension(200, 39));
        emailField.setPreferredSize(new Dimension(200, 29));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(emailField, gridBagConstraints);
        emailField.setFont(ResourceManager.getFont("inter_regular.24"));

        pwdLabel.setText("Password:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(pwdLabel, gridBagConstraints);
        pwdLabel.setFont(ResourceManager.getFont("inter_regular.26"));

        pwdField.setMinimumSize(new Dimension(200, 29));
        pwdField.setPreferredSize(new Dimension(200, 29));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(pwdField, gridBagConstraints);
        pwdField.setFont(ResourceManager.getFont("inter_regular.18"));

        pwdCheckLabel.setText("Re- Enter Password:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(pwdCheckLabel, gridBagConstraints);
        pwdCheckLabel.setFont(ResourceManager.getFont("inter_regular.26"));

        pwdCheckField.setMinimumSize(new Dimension(200, 29));
        pwdCheckField.setPreferredSize(new Dimension(200, 29));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(10, 5, 5, 5);
        add(pwdCheckField, gridBagConstraints);
        pwdCheckField.setFont(ResourceManager.getFont("inter_regular.18"));

        signupErrorLabel.setForeground(new Color(210, 0, 0));
        signupErrorLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(signupErrorLabel, gridBagConstraints);
        signupErrorLabel.setFont(ResourceManager.getFont("inter_regular.18"));

        signupBtn.setForeground(new Color(10, 120, 120));
        signupBtn.setIcon(ResourceManager.getIcon("signup_default", 32)
        );
        signupBtn.setText("Sign Up");
        signupBtn.setBorderPainted(false);
        signupBtn.setContentAreaFilled(false);
        signupBtn.setFocusPainted(false);
        signupBtn.setPressedIcon(ResourceManager.getIcon("signup_pressed", 32)
        );
        signupBtn.setRolloverIcon(ResourceManager.getIcon("signup_rollover", 32)
        );
        signupBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                signupBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new Insets(50, 0, 20, 0);
        add(signupBtn, gridBagConstraints);
        signupBtn.setFont(ResourceManager.getFont("inter_regular.26"));

        loginInfoLabel.setText("Already have an account?");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new Insets(20, 10, 10, 10);
        add(loginInfoLabel, gridBagConstraints);
        loginInfoLabel.setFont(ResourceManager.getFont("inter_regular.20"));

        loginBtn.setForeground(ResourceManager.getColor("main_dark"));
        loginBtn.setIcon(ResourceManager.getIcon("logout_default", 32)
        );
        loginBtn.setText("Log In");
        loginBtn.setBorderPainted(false);
        loginBtn.setContentAreaFilled(false);
        loginBtn.setFocusPainted(false);
        loginBtn.setPressedIcon(ResourceManager.getIcon("logout_pressed", 32)
        );
        loginBtn.setRolloverIcon(ResourceManager.getIcon("logout_rollover", 32)
        );
        loginBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new Insets(5, 10, 25, 10);
        add(loginBtn, gridBagConstraints);
        loginBtn.setFont(ResourceManager.getFont("inter_regular.20"));
    }// </editor-fold>//GEN-END:initComponents

    private void signupBtnActionPerformed(ActionEvent evt) {
        String username = usernameField.getText();
        String email = emailField.getText();

        if (username.length() <= 3) {
            signupErrorLabel.setText("Username too small");
            return;
        }

        if (!Database.isUsernameAvailable(username)) {
            signupErrorLabel.setText("Username already taken");
            return;
        }

        if (!EncryptionUtils.isValidEmail(email)) {
            signupErrorLabel.setText("Invaild Email");
            return;
        }

        if (!isPasswordConfirmed()) {
            signupErrorLabel.setText("Passwords do not match");
            return;
        }

        if (!EncryptionUtils.isValidPassword(pwdField.getPassword())) {
            if (pwdField.getPassword().length < 8 || pwdField.getPassword().length > 20) {
                signupErrorLabel.setText("Password length must be 8-20");
                return;
            }
            signupErrorLabel.setText("Include Uppercase, Lowercase, Digit, and Special Character");
            return;
        }

        String password = EncryptionUtils.encryptPwd(pwdField.getPassword());
        UserDataObject userData = new UserDataObject(username, password, email.toLowerCase());
        Database.insertData(userData);

        AuthenticationForm.authenticateUser(username);
    }

    private boolean isPasswordConfirmed() {
        if (pwdField.getPassword().length != pwdCheckField.getPassword().length)
            return false;

        for (int i = 0; i < pwdField.getPassword().length; i++) {
            if (pwdField.getPassword()[i] != pwdCheckField.getPassword()[i])
                return false;
        }

        return true;
    }

    private void loginBtnActionPerformed(ActionEvent evt) {
        AuthenticationForm.setRegisterUser(false);
    }
    // End of variables declaration//GEN-END:variables
}
